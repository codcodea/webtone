import {
  isFunction
} from "../chunk/AZ25COBI.jsx";
import {
  dismissible_default
} from "../chunk/FPO5WMIW.jsx";
import "../chunk/A4QYJDWU.jsx";
import "../chunk/34F543WF.jsx";
import "../chunk/OVF5D3QO.jsx";
import "../chunk/GVREBUB5.jsx";
import {
  access
} from "../chunk/ABJUXFHA.jsx";

// src/components/Dismissible.tsx
import {
  createContext,
  createEffect,
  createMemo,
  createSignal,
  createUniqueId,
  mergeProps,
  onCleanup,
  splitProps,
  untrack,
  useContext
} from "solid-js";
var DismissibleContext = createContext();
var Dismissible = (props) => {
  const memoizedDismissible = createMemo(() => {
    const upperContext = useContext(DismissibleContext);
    if (upperContext) {
      return <DismissibleLayer {...props} />;
    }
    const layerId = createUniqueId();
    const [layers, setLayers] = createSignal([layerId]);
    const onLayerShow = (layerId2) => {
      setLayers((layers2) => [...layers2, layerId2]);
    };
    const onLayerDismiss = (layerId2) => {
      setLayers((layers2) => layers2.filter((layer) => layer !== layerId2));
    };
    return <DismissibleContext.Provider
      value={{
        layers,
        onLayerShow,
        onLayerDismiss
      }}
    ><DismissibleLayer {...props} /></DismissibleContext.Provider>;
  });
  return memoizedDismissible;
};
var DismissibleLayer = (props) => {
  const defaultedProps = mergeProps(
    {
      enabled: true,
      dismissOnEscapeKeyDown: true,
      dismissOnOutsidePointer: true,
      dismissOnOutsidePointerStrategy: "pointerup",
      noOutsidePointerEvents: true
    },
    props
  );
  const [localProps, otherProps] = splitProps(defaultedProps, [
    "enabled",
    "children",
    "dismissOnEscapeKeyDown",
    "dismissOnOutsidePointer",
    "dismissOnOutsidePointerStrategy",
    "dismissOnOutsidePointerIgnore",
    "noOutsidePointerEvents",
    "onDismiss"
  ]);
  const context = useContext(DismissibleContext);
  const layerId = createUniqueId();
  onCleanup(() => {
    context.onLayerDismiss(layerId);
  });
  createEffect(() => {
    if (localProps.enabled) {
      context.onLayerShow(layerId);
    } else {
      context.onLayerDismiss(layerId);
    }
  });
  const isLastLayer = () => {
    return context.layers()[context.layers().length - 1] === layerId;
  };
  dismissible_default({
    dismissOnEscapeKeyDown: () => access(localProps.dismissOnEscapeKeyDown) && isLastLayer() && localProps.enabled,
    dismissOnOutsidePointer: () => access(localProps.dismissOnOutsidePointer) && isLastLayer() && localProps.enabled,
    dismissOnOutsidePointerStrategy: localProps.dismissOnOutsidePointerStrategy,
    dismissOnOutsidePointerIgnore: localProps.dismissOnOutsidePointerIgnore,
    noOutsidePointerEvents: () => access(localProps.noOutsidePointerEvents) && localProps.enabled,
    onDismiss: (reason) => {
      localProps.onDismiss(reason);
    },
    ...otherProps
  });
  const memoizedChildren = createMemo(() => localProps.children);
  const resolveChildren = () => {
    const children = memoizedChildren();
    if (isFunction(children)) {
      return children({
        get isLastLayer() {
          return isLastLayer();
        }
      });
    }
    return children;
  };
  return untrack(() => resolveChildren());
};
var Dismissible_default = Dismissible;
export {
  Dismissible_default as default
};
