import { ButtonRoot } from './EOS4KX3P.js';
import { createControllableSignal } from './BLN63FDC.js';
import { Polymorphic } from './SNFWSEOJ.js';
import { __export } from './5ZKAE4VZ.js';
import { insert, createComponent, mergeProps, memo, template } from 'solid-js/web';
import { composeEventHandlers, mergeDefaultProps } from '@kobalte/utils';
import { createContext, splitProps, createSignal, createEffect, batch, untrack, Show, For, createUniqueId, useContext } from 'solid-js';

// src/pagination/index.tsx
var pagination_exports = {};
__export(pagination_exports, {
  Ellipsis: () => PaginationEllipsis,
  Item: () => PaginationItem,
  Items: () => PaginationItems,
  Next: () => PaginationNext,
  Pagination: () => Pagination,
  Previous: () => PaginationPrevious,
  Root: () => PaginationRoot
});
var _tmpl$ = /* @__PURE__ */ template(`<li>`);
function PaginationEllipsis(props) {
  return (() => {
    const _el$ = _tmpl$();
    insert(_el$, createComponent(Polymorphic, mergeProps({
      as: "div"
    }, props)));
    return _el$;
  })();
}
var PaginationContext = createContext();
function usePaginationContext() {
  const context = useContext(PaginationContext);
  if (context === void 0) {
    throw new Error("[kobalte]: `usePaginationContext` must be used within a `Pagination` component");
  }
  return context;
}

// src/pagination/pagination-item.tsx
var _tmpl$2 = /* @__PURE__ */ template(`<li>`);
function PaginationItem(props) {
  const context = usePaginationContext();
  const [local, others] = splitProps(props, ["page", "onClick"]);
  const isCurrent = () => {
    return context.page() === local.page;
  };
  const onClick = () => {
    context.setPage(local.page);
  };
  return (() => {
    const _el$ = _tmpl$2();
    insert(_el$, createComponent(ButtonRoot, mergeProps({
      get ["aria-current"]() {
        return isCurrent() ? "page" : void 0;
      },
      get ["data-current"]() {
        return isCurrent() ? "" : void 0;
      },
      get onClick() {
        return composeEventHandlers([local.onClick, onClick]);
      }
    }, others)));
    return _el$;
  })();
}
function PaginationItems(props) {
  const context = usePaginationContext();
  const [showFirst, setShowFirst] = createSignal(false);
  const [showLast, setShowLast] = createSignal(false);
  const [showFirstEllipsis, setShowFirstEllipsis] = createSignal(false);
  const [showLastEllipsis, setShowLastEllipsis] = createSignal(false);
  const [previousSiblingCount, setPreviousSiblingCount] = createSignal(0);
  const [nextSiblingCount, setNextSiblingCount] = createSignal(0);
  createEffect(() => {
    batch(() => {
      setShowFirst(context.showFirst() && context.page() - 1 > context.siblingCount());
      setShowLast(context.showLast() && context.count() - context.page() > context.siblingCount());
      setShowFirstEllipsis(context.page() - (context.showFirst() ? 2 : 1) > context.siblingCount());
      setShowLastEllipsis(context.count() - context.page() - (context.showLast() ? 1 : 0) > context.siblingCount());
      setPreviousSiblingCount(Math.min(context.page() - 1, context.siblingCount()));
      setNextSiblingCount(Math.min(context.count() - context.page(), context.siblingCount()));
      if (context.fixedItems() !== false) {
        untrack(() => {
          setPreviousSiblingCount((prev) => prev + Math.max(context.siblingCount() - nextSiblingCount(), 0));
          setNextSiblingCount((prev) => prev + Math.max(context.siblingCount() - previousSiblingCount(), 0));
        });
        if (!showFirst())
          setNextSiblingCount((prev) => prev + 1);
        if (!showLast())
          setPreviousSiblingCount((prev) => prev + 1);
        if (context.fixedItems() === true) {
          if (!showFirstEllipsis())
            setNextSiblingCount((prev) => prev + 1);
          if (!showLastEllipsis())
            setPreviousSiblingCount((prev) => prev + 1);
        }
      }
    });
  });
  return [createComponent(Show, {
    get when() {
      return showFirst();
    },
    get children() {
      return context.renderItem(1);
    }
  }), createComponent(Show, {
    get when() {
      return showFirstEllipsis();
    },
    get children() {
      return context.renderEllipsis();
    }
  }), createComponent(For, {
    get each() {
      return [...Array(previousSiblingCount()).keys()].reverse();
    },
    children: (offset) => memo(() => context.renderItem(context.page() - (offset + 1)))
  }), memo(() => context.renderItem(context.page())), createComponent(For, {
    get each() {
      return [...Array(nextSiblingCount()).keys()];
    },
    children: (offset) => memo(() => context.renderItem(context.page() + (offset + 1)))
  }), createComponent(Show, {
    get when() {
      return showLastEllipsis();
    },
    get children() {
      return context.renderEllipsis();
    }
  }), createComponent(Show, {
    get when() {
      return showLast();
    },
    get children() {
      return context.renderItem(context.count());
    }
  })];
}
var _tmpl$3 = /* @__PURE__ */ template(`<li>`);
function PaginationNext(props) {
  const context = usePaginationContext();
  const [local, others] = splitProps(props, ["onClick"]);
  const onClick = () => {
    context.setPage(context.page() + 1);
  };
  const isDisabled = () => context.page() === context.count();
  return (() => {
    const _el$ = _tmpl$3();
    insert(_el$, createComponent(ButtonRoot, mergeProps({
      get tabIndex() {
        return isDisabled() || context.page() === context.count() ? -1 : void 0;
      },
      get disabled() {
        return isDisabled();
      },
      get ["aria-disabled"]() {
        return isDisabled() || void 0;
      },
      get ["data-disabled"]() {
        return isDisabled() ? "" : void 0;
      },
      get onClick() {
        return composeEventHandlers([local.onClick, onClick]);
      }
    }, others)));
    return _el$;
  })();
}
var _tmpl$4 = /* @__PURE__ */ template(`<li>`);
function PaginationPrevious(props) {
  const context = usePaginationContext();
  const [local, others] = splitProps(props, ["onClick"]);
  const onClick = () => {
    context.setPage(context.page() - 1);
  };
  const isDisabled = () => context.page() === 1;
  return (() => {
    const _el$ = _tmpl$4();
    insert(_el$, createComponent(ButtonRoot, mergeProps({
      get tabIndex() {
        return isDisabled() || context.page() === 1 ? -1 : void 0;
      },
      get disabled() {
        return isDisabled();
      },
      get ["aria-disabled"]() {
        return isDisabled() || void 0;
      },
      get ["data-disabled"]() {
        return isDisabled() ? "" : void 0;
      },
      get onClick() {
        return composeEventHandlers([local.onClick, onClick]);
      }
    }, others)));
    return _el$;
  })();
}
var _tmpl$5 = /* @__PURE__ */ template(`<ul>`);
function PaginationRoot(props) {
  const defaultId = `pagination-${createUniqueId()}`;
  const mergedProps = mergeDefaultProps({
    id: defaultId
  }, props);
  const [local, others] = splitProps(mergedProps, ["page", "defaultPage", "onPageChange", "count", "siblingCount", "showFirst", "showLast", "fixedItems", "itemComponent", "ellipsisComponent", "disabled", "children"]);
  const state = createControllableSignal({
    defaultValue: () => local.defaultPage ?? 1,
    onChange: local.onPageChange,
    value: () => local.page
  });
  const context = {
    count: () => local.count,
    siblingCount: () => local.siblingCount ?? 1,
    showFirst: () => local.showFirst ?? true,
    showLast: () => local.showLast ?? true,
    fixedItems: () => local.fixedItems ?? false,
    isDisabled: () => local.disabled ?? false,
    renderItem: (page) => local.itemComponent({
      page
    }),
    renderEllipsis: local.ellipsisComponent,
    page: state[0],
    setPage: state[1]
  };
  return createComponent(PaginationContext.Provider, {
    value: context,
    get children() {
      return createComponent(Polymorphic, mergeProps({
        as: "nav",
        get ["data-disabled"]() {
          return local.disabled ? "" : void 0;
        }
      }, others, {
        get children() {
          const _el$ = _tmpl$5();
          insert(_el$, () => local.children);
          return _el$;
        }
      }));
    }
  });
}

// src/pagination/index.tsx
var Pagination = Object.assign(PaginationRoot, {
  Ellipsis: PaginationEllipsis,
  Item: PaginationItem,
  Items: PaginationItems,
  Next: PaginationNext,
  Previous: PaginationPrevious
});

export { Pagination, PaginationEllipsis, PaginationItem, PaginationItems, PaginationNext, PaginationPrevious, PaginationRoot, pagination_exports };
